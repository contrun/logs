* How does rollback protection in Android and Chrome OS works? [[security]]
[[https://source.android.com/docs/security/features/verifiedboot/verified-boot#rollback-protection][Verifying Boot  |  Android Open Source Project]]
[[https://android.googlesource.com/platform/external/avb/+/master/README.md#Rollback-Protection][Android Verified Boot 2.0]]
* Any kind of side channel attacks for amd sev? [[AMD Secure Encrypted Virtualization]] [[side-channel attacks]]
[[https://www.amd.com/en/processors/amd-secure-encrypted-virtualization][AMD Secure Encrypted Virtualization | AMD]]
#+BEGIN_QUOTE
Additionally, SEV-SNP optionally supports the ability to restrict how interrupts and exceptions can be injected into a VM. It can also support Branch Target Buffer (BTB) protection against certain types of side channel attacks. Both protections are discussed later in this white paper.
#+END_QUOTE
* Any checklist of cryptographic libraries authors to avoid side-channel attacks? [[side-channel attacks]] [[development practices]]
* How is the owner of a physical page in AMD SEV reverse map table tracked? [[operating system]] [[memory paging]] [[AMD Secure Encrypted Virtualization]] 
The normal page table is created per process. When the operating system is doing context switch, it also changes [[https://wiki.osdev.org/CPU_Registers_x86#CR3][the register cr3 in x86]] (level 0 of the page table). Thus the owner of a page table can be easily tracked by the operating system. On the other hand, the reverse map table maps the physical memory address to the owner information of that page.
[[https://www.amd.com/en/processors/amd-secure-encrypted-virtualization][AMD Secure Encrypted Virtualization | AMD]]
#+BEGIN_QUOTE
The RMP is a single data structure shared across the system that contains one entry for every 4k page of DRAM that may be used by VMs. The goal of the RMP is simple: it tracks the owner for each page of memory. Pages of memory can be owned by the hypervisor, owned by a specific VM, or owned by the AMD-SP. Access to memory is controlled so only the owner of that page can write it. The RMP is used in conjunction with standard x86 page tables to enforce memory restrictions and page access rights.
#+END_QUOTE
Since there exists only one AMD SEV reverse map table, can we store all the the owner information in the reverse map table (64 bit of information may not be enough)? It seems that we need some indirection.
* Memory protection techniques. [[operating system]]
** Segmentation
[[https://en.wikipedia.org/wiki/Memory_segmentation][Memory segmentation - Wikipedia]]
[[https://wiki.osdev.org/Segmentation][Segmentation - OSDev Wiki]]
** Paging
[[https://en.wikipedia.org/wiki/Memory_paging][Memory paging - Wikipedia]]
[[https://wiki.osdev.org/Paging][Paging - OSDev Wiki]]
* How does reverse map table distinguish guests, nested guests? It must need helps from the operating system and hypervisor. Is there a new instruction? What kind of information is passed from the operating system and hypervisor to the hardware? [[AMD Secure Encrypted Virtualization]]
[[https://www.amd.com/en/processors/amd-secure-encrypted-virtualization][AMD Secure Encrypted Virtualization | AMD]]
#+BEGIN_QUOTE
New CPU instructions exist to enable manipulation of RMP entries, allowing the hypervisor to assign pages to specific guests, take pages back, etc.
#+END_QUOTE
* How does nested memory paging work? [[memory paging]]
Say ~son_os~ is a guest OS managed by the OS ~os~, ~grandson_os~ is a guest OS managed by ~son_os~. We can translate ~grandson_os~'s virtual memory address ~vma~ to the fake physical memory address ~fpma~ by the ~son_os~. The ~fpma~ is the translated to the real physical memory address ~rpma~. This chain of translation is obviously not efficient. Can nested paging reduce the complexity from \(o(n)\) to \(o(1)\)? How does it do that? Does it need help from the ~son_os~ (many many son OSes) in the middle. Will it leak hypervisor states so that the nested guests can tell it is in a nested virtualization environment?
* How to check memory access rights with reverse map table? [[AMD Secure Encrypted Virtualization]]
[[https://www.amd.com/en/processors/amd-secure-encrypted-virtualization][AMD Secure Encrypted Virtualization | AMD]] 
#+BEGIN_QUOTE
The RMP is indexed by system physical address and is checked at the end of CPU and IOMMU table-walks. For example, in native (non-VM) mode, virtual addresses are translated into physical addresses using the standard x86 page tables. After that translation, the final physical address is used to index the RMP. The RMP entry is read out and checked. If the RMP entry indicates that the page is a hypervisor-owned page, then the checks pass and a new TLB entry is created. If the RMP entry indicates that the page is not a hypervisor-owned page though, the table-walk faults (#PF) and the access is denied.
#+END_QUOTE
* How to check memory access rights with reverse map table in nested virtualization? [[AMD Secure Encrypted Virtualization]]
[[https://www.amd.com/en/processors/amd-secure-encrypted-virtualization][AMD Secure Encrypted Virtualization | AMD]]
#+BEGIN_QUOTE
When running in an SEV-SNP VM, the RMP check is slightly more complex. As with native mode, the virtual address is first translated into a system physical address. In this case, AMD-V 2-level paging1 is used to translate a Guest Virtual Address (GVA) to a Guest Physical Address (GPA) and finally to a System Physical Address (SPA). The SPA is used to index the RMP and the entry is checked. This RMP entry should contain information indicating that the page is a guest-owned page, assigned to this specific guest, and mapped at this specific GPA. That is, the RMP entry contains the GPA where it should be mapped, and the hardware verifies that this GPA matches the GPA of the current table-walk. If this or any other check fails, an exception is generated, and the access is denied.
#+END_QUOTE
* Will AES encryption/decryption of data incur significant latency penalty in memory reading/writing? [[computer architecture]]
On one hand, reading/writing memory is significantly slower than the running of AES encryption/decryption instruction. On the other hand, changing data bytes by bytes (encryption/decryption) will obviously have a high overhead on the reading/writing of data. So the corollary is that AES encryption/decryption must work a bulk of data (maybe it takes memory addresses as arguments, does not need to encrypt/decrypt data upfront, i.e. programs can use encrypted data without decrypt them first).
[[https://www.intel.com/content/dam/doc/white-paper/advanced-encryption-standard-new-instructions-set-paper.pdf][Intel ® Advanced Encryption Standard (AES) New Instructions Set]]
* Can the guests give DOS attacks to the host in AMD SEV by refusing to release its private memory? [[AMD Secure Encrypted Virtualization]]
Since the same physical memory should never be mapped twice, when the guest claims some physical memory, the hypervisor may not reuse this physical memory anymore. What if the guest continues to hold this memory, and refuse to give up? There must be some clean up mechanism for the guest shutdown. But only the hypervisor knows when and if the guest shuts down. If the hypervisor lies about it, will the guarantees of memory integrity of AMD SEV invalidated (for example, the physical memory is indeed mapped twice)?
* Encoding less than relationship with arithmetic circuits. [[arithmetic circuits]]
\( a <  b \Leftrightarrow a + r = b, r > 0\)
* Generic transformation from an arbitrary one-way asymmetric encryption 
scheme to a chosen-ciphertext secure asymmetric encryption scheme in the
 random oracle model. [[Fujisaki-Okamoto transformation]]
[[https://link.springer.com/article/10.1007/s00145-011-9114-1][Secure Integration of Asymmetric and Symmetric Encryption Schemes | SpringerLink]]
* Identity-Based Encryption from the Weil Pairing. [[identity-based encryption]] [[Boneh–Franklin scheme]]
[[https://link.springer.com/chapter/10.1007/3-540-44647-8_13][Identity-Based Encryption from the Weil Pairing | SpringerLink]]
Let \( e: G_1 \times G_1 \to G_2 \) be a bilinear non-degenerate Elliptic curve pairing. Let \( H_1: \{1, 2\}^* \to G_1^* \) be a hash function from strings to the elliptic group \( G_1^*\), \( H_2: G_2 \to \{1, 2\}^n \) be a hash function for some \( n \in \Z \), \( H_3: \{1, 2\}^n \times \{1, 2\}^n \to \Z_q^* \) be a hash function, \( H_4: \{1, 2\}^n \to \{1, 2\}^n \) be a hash function.
**