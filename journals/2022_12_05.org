* A cheaper way to transfer assets for exchanges and its users.
Let \( EX \) be a exchange (say bitcoin exchange) with users \( A \) and \( B \), \( C \) be a bitcoin user who has not deposited bitcoins in \( EX \), \( CT \) be a contract implement the relevant logic described below, \( T \) be the Merkle tree in which \( CT \) stores the users and balances information.
 
One of the biggest problems of using Merkle tree to store state is that say \( A \) wants to add \( x \) bitcoins to his/her account by transitioning the Merkle tree from \( T \) to \( T' \), after the state transition, the proof of \( B \) having \( y \) bitcoins in \( T \) is no longer a valid proof of \( B \) having \( y \) bitcoins in \( T' \). If we can find a data structure that allows proof to remain valid, the following protocol can be greatly simplified.

Another difficulty lies in how to aggregate tombstones. Say at first \( A \) withdraw from \( EX \), we set up a tombstone for \( A \) in the metadata \( M \) companion to \( T \). This way \( T \) can remain unchanged. Then \( B \) also withdraw from \( EX \). We need also add the tombstone of \( B \) to \( M \). Can we aggregate them?

+ Setup
\( EX \) deploys the \( CT \) to the network, whose code is public-auditable. Other parties in the protocol verifies the integrity of the contract.
+ Deposit
Say \( A \) want to deposit a balance of \( x \) to the \( EX \). \( A \) send an intention of deposit to \( EX \). \( EX \) gives back a new tree \( T
+ Transfer
+ Withdraw
* [[https://academy.binance.com/en/articles/what-is-proof-of-reserves-and-how-it-works-on-binance][What Is Proof of Reserves and How it Works on Binance | Binance Academy]]