* How do we convert syscalls and its result to circuits to ZK VM? Can we convert the model of syscalls to memory read and memory write if we can be mmap all the IO devices?
* How can a ZK VM model undefined, unspecified and non-deterministic and unpredictable behaviors? Can we verify if the trace of one execution are legal even if non-determinism exists? Examples of non-determinisim (memory access in a multi-thread environment, unpredictable operating systems signal sending).
* [[https://riscv.org/wp-content/uploads/2018/05/10.45-clifford-barcelona.pdf][Undefined, Unspecified, Non-deterministic, and Implementation Defined Behavior in Verifiable Specs]]
* How to pin point division by zero instruction in x86? Linux deliver a SIGFPE (see [[https://www.gnu.org/software/libc/manual/html_node/Program-Error-Signals.html][Program Error Signals (The GNU C Library)]]) to the program when a processor division by zero exception is caught. How can we know which instruction caused this exception? Note the exception can be only captured by the operating system and the signal is delivered asynchronously by the operating system.
[[https://stackoverflow.com/questions/49082174/signal-handlingsigfpe][c++ - Signal handling(SIGFPE) - Stack Overflow]]
#+BEGIN_QUOTE
In x86, this is because [[https://wiki.osdev.org/Exceptions][divide error is a /fault/]], which means when control flow returns, the program counter ( ~%rip~ ) will point to the address of the previous faulty code, *not* the next instruction. A normal strategy of handling SIGFPE is using  ~setjmp~  to jump to a recoverable state from the signal handler.
#+END_QUOTE
* Why is the python interpreter not aborted when I run ~python -c 'print(1/0)'~?
It seems the python interpreter correctly caught the exception without setting up a custom signal handler to SIGFPE. This can be verified by ~strace -f python -c 'print(1/0)' |& less~, which has the following output ~rt_sigaction(SIGFPE, NULL, {sa_handler=SIG_DFL, sa_mask=[], sa_flags=0}, 8) = 0~.
While for a vanilla c program,
#+BEGIN_SRC text
@aol ➜ c  cat fpe.c 
#include <stdio.h>
int main() {
 return printf("%f\n", 1L / 0);
}
@aol ➜ c  make fpe
cc     fpe.c   -o fpe
fpe.c: In Funktion »main«:
fpe.c:3:27: Warnung: Division durch Null [-Wdiv-by-zero]
    3 |  return printf("%f\n", 1L / 0);
      |                           ^
@aol ➜ c  ./fpe 
[1]    1893327 floating point exception (core dumped)  ./fpe
@aol ➜ c  echo $?
136
#+END_SRC
* How to compute polynomial multiplication with fast fourier transform? [[https://cse.hkust.edu.hk/mjg_lib/Classes/COMP3711H_Fall16/lectures/FFT_Slides.pdf][The Fast Fourier Transform and Polynomial Multiplication]].