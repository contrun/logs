* What does [Memory coherence in shared virtual memory systems | ACM Transactions on Computer Systems](https://dl.acm.org/doi/10.1145/75104.75105) teach us for cache coherence in distributed systems? [[memory coherence]] [[cache coherence]]
In shared virtual memory systems, keeping memory coherent is non-trivial (just like cache coherence in distributed systems). Is there any cache coherence lessons we can learn from this paper?
* Proving that algorithm 1 in [Memory coherence in shared virtual memory systems | ACM Transactions on Computer Systems](https://dl.acm.org/doi/10.1145/75104.75105) is lock-free and satisfies the coherence condition formally.
#+BEGIN_QUOTE
Algorithm 1 MonitorCentralManager
Read fault handler:
Lo&( PTableC p I.lock 1;
IF I am manager THEN BEGIN
Lo&( InfoC p l.lock >;
InfoC p l.copyset
:= InfoC p 1 .copyset U {ManagerNode};
receive page p from Info[: p 1 .ouner;
Unlock( Info E p 1. lock > ;
END;
ELSE BEGIN
ask manager for read access to p and a copy of p;
receive p;
send confirmation to manager;
END;
PTable[ p ].access := read;
Unlock( PTableC p 1 .lock > ;
Read server:
Lock( PTable [ p ] . lock ) ;
IF I am owner THEN BEGIN
PTable[ p ].access := read;
send copy of p;
END;
I/nlock( PTableC p 1 .lock 1;
IF I am manager THEN BEGIN
Lock( InfoC p 1 .lock 1;
InfoC p l.copyset
:= Info[ p l.copyset U {RequestNode};
ask Info[ p ].ouner to send copy of p to RequestNode;
receive confirmation from RequestNode;
UnlockC Info C p I. lock > ;
END;
Write fault handler:
Lock( PTable [ p 1. lock 1;
IF I am manager THEN BEGIN
Lock( InfoC p l.lock 1;
Invalidate( p. InfoC p l.copyset 1;
Infol: p l.copyset := {};
Unlock( Info1 p 1 .lock 1;
END;
ELSE BEGIN
ask manager for write access to p;
receive p;
send confirmation to manager;
END;
Figure 2
ACM Transactions on Computer Systems, Vol. 7, No. 4, November 1989.
Memory Coherence in Shaped Virtual Memory Systems l 331
PTable[ p I.access := write;
Unlock( PTable[ p I.lock >;
Write server:
Lock( PTable [ p 1 .lock ) ;
IF I am owner THEN BEGIN
send copy of p;
PTable[ p l.access := nil;
END;
Unlock( PTable[ p 1. lock > ;
IF I am manager THEN BEGIN
Lock( Info[ p ].lock >;
Invalidale( p, Info C p 1. copyset ) ;
Info[ p J.copyset := {};
ask Info[ p ].ouner to send p to RequestNode;
receive confirmation from RequestNode;
UnlockC Info C p 1. lock > ;
END;
#+END_QUOTE