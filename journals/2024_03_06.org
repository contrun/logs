* What does anchor channels actually do? Which kind of attacks can it prevent? [[lightning network]]
[[https://bitcoinops.org/en/topics/anchor-outputs/][Anchor outputs | Bitcoin Optech]]
#+BEGIN_QUOTE
As of this writing, the most recent versions of the design add two outputs to the commitment transaction—one for each LN party—and require all other outputs in the commitment transaction to have their scripts encumbered by a ~1 OP_CHECKSEQUENCEVERIFY~ (CSV) condition that prevents them from being spent for at least one block.
#+END_QUOTE

#+BEGIN_QUOTE
Each party has its own anchor output that locks to their funding key. This is to prevent a malicious peer from attaching child transactions with a low fee density to an anchor and thereby blocking the victim from getting the commit tx confirmed in time. This defense is supported by a change in Bitcoin core 0.19: bitcoin/bitcoin#15681. This is also the reason that every non-anchor output on the commit tx is CSV locked. 
#+END_QUOTE
* Why are offered HTLC transactions in lightning network using a multisig to lock outputs and check time lock in the subsequent transaction? Can we directly build time lock into this HTLC transcation? [[lightning network]]
[[https://github.com/lightning/bolts/blob/master/03-transactions.md#offered-htlc-outputs][bolts/03-transactions.md at master · lightning/bolts]]
#+BEGIN_SRC
# To remote node with revocation key
OP_DUP OP_HASH160 <RIPEMD160(SHA256(revocationpubkey))> OP_EQUAL
OP_IF
    OP_CHECKSIG
OP_ELSE
    <remote_htlcpubkey> OP_SWAP OP_SIZE 32 OP_EQUAL
    OP_NOTIF
        # To local node via HTLC-timeout transaction (timelocked).
        OP_DROP 2 OP_SWAP <local_htlcpubkey> 2 OP_CHECKMULTISIG
    OP_ELSE
        # To remote node with preimage.
        OP_HASH160 <RIPEMD160(payment_hash)> OP_EQUALVERIFY
        OP_CHECKSIG
    OP_ENDIF
OP_ENDIF
#+END_SRC
* Who do we prevent the adversaries from broadcast old commitment transactions and take all assets by revoking them immediately? [[lightning network]]
[[https://github.com/lightning/bolts/blob/master/03-transactions.md#to_local-output][bolts/03-transactions.md at master · lightning/bolts]]
We use both ~nSequence~ and ~OP_CHECKSEQUENCEVERIFY~ to prevent a transaction to local from being spent to early. But why is both ~nSequence~ and ~OP_CHECKSEQUENCEVERIFY~ being used? ~nSequence~ is used for transaction level time lock, while ~OP_CHECKSEQUENCEVERIFY~ is used for TXO level time lock. Does ~nSequence~ already imply ~OP_CHECKSEQUENCEVERIFY~?
* What are the inputs of commitment transactions in lightning network? ]