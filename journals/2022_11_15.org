* Elaborate on archiving privacy with re-randomization. Give a concrete example. [[neptune cash]]
[[https://neptune.cash/whitepaper/][Neptune whitepaper]]
#+BEGIN_QUOTE
The re-randomizability of the commitment scheme is an essential 
quality for privacy as it achieves de-linking the output UTXOs of 
confirmed transactions from the input UTXOs of new transactions. 
Specifically, to the outside observer (who has no access to the miner's 
randomness) the output and input UTXOs are unlinkable even though they 
decommit to the same or matching information.
#+END_QUOTE
* [[https://github.com/opentimestamps/opentimestamps-server/blob/master/doc/merkle-mountain-range.md][opentimestamps-server/merkle-mountain-range.md at master · opentimestamps/opentimestamps-server · GitHub]] [[merkle mountain range]]
A variant of Merkle tree to accumulate new elements.
* What is the use of offset in FRI? [[fast Reed-Solomon interactive oracle proofs of proximity]] [[triton-vm]] 
:PROPERTIES:
:id: 6373a2ca-3200-4bc4-bb32-5588142dce39
:END:
In FRI, we evaluate/interpolate in the coset of \( \{\omega^i\} \) instead \( \{\omega^i\} \) itself.
[[https://aszepieniec.github.io/stark-anatomy/stark#fnref:1][Anatomy of a STARK, Part 4: The STARK Polynomial IOP | Anatomy of a STARK]]
#+BEGIN_QUOTE
It is worth ensuring that the trace evaluation domain is disjoint from 
the FRI evaluation domain, for example by using the coset-trick. 
However, if overlapping subgroups are used for both domains, then \( \omega^{1/\rho} = \omicron \) and \( \omega \) generates the larger domain whereas \( \omicron \) generates the smaller one.
#+END_QUOTE
This still does not explain what would happen if the trace evaluation domain is a subset of the FRI evaluation domain. But [[https://github.com/TritonVM/triton-vm/blob/bd2cf06016fbd591c7d2ee2e1b9dc348380a09b3/triton-vm/src/cross_table_arguments.rs#L44-L65][the zerofier here]] could be zero if the trace evaluation domain is a subset of the FRI evaluation domain. What's the meaning of this zerofier? This seems to guarantee that the evaluations of two polynomials at \( \omicron^{-1} \) domain are equal. This is exactly what permutation arguments want.
* How does triton vm check copy constraint with permutation arguments? Give a concrete example. [[triton-vm]]
+ TODO: Convert subset arguments to permutation arguments.
+ For each permutation argument to be checked, triton vm first generates an additional column that will be used to check if it is a permutation of another column in another table directly (by adding several columns data with random weights, can be used to batch check). For [[https://github.com/TritonVM/triton-vm/blob/bd2cf06016fbd591c7d2ee2e1b9dc348380a09b3/triton-vm/src/cross_table_arguments.rs#L168-L179][the pair of columns of instructions in processor table and instruction table]], see [[https://github.com/TritonVM/triton-vm/blob/bd2cf06016fbd591c7d2ee2e1b9dc348380a09b3/triton-vm/src/table/processor_table.rs#L142-L127][~processor_table.rs~]] for the column of program table (resp. [[https://github.com/TritonVM/triton-vm/blob/bd2cf06016fbd591c7d2ee2e1b9dc348380a09b3/triton-vm/src/table/instruction_table.rs#L395-L408][~instruction_table.rs~]] for the column of instruction table). Note here an random offset are being subtracted from the column data.
+ For each permutation arguments, the prover obtain a running product from the column data. The prover also combines multiple permutation arguments with random weights in [[https://github.com/TritonVM/triton-vm/blob/bd2cf06016fbd591c7d2ee2e1b9dc348380a09b3/triton-vm/src/cross_table_arguments.rs#L461-L498][~cross_table_arguments.rs~]].
+ [[https://github.com/TritonVM/triton-vm/blob/bd2cf06016fbd591c7d2ee2e1b9dc348380a09b3/triton-vm/src/cross_table_arguments.rs#L500-L511][Check if the evaluations of resulting polynomials at the last position agree]].
* How does triton vm check evaluation result is legal with evaluation arguments? Give a concrete example. [[triton-vm]]
For the pair of columns of instructions in program table and instruction table, see [[https://github.com/TritonVM/triton-vm/blob/bd2cf06016fbd591c7d2ee2e1b9dc348380a09b3/triton-vm/src/table/program_table.rs#L238-L255][~program_table.rs~]] for the column of program table (resp. [[https://github.com/TritonVM/triton-vm/blob/bd2cf06016fbd591c7d2ee2e1b9dc348380a09b3/triton-vm/src/table/instruction_table.rs#L410-L421][~instruction_table.rs~]] for the column of instruction table).
* How does the [[https://github.com/maticnetwork/miden#planned-features][faulty execution of miden ]]work? [[miden]]
* How do we convert from a permutation argument to a subset argument? [[permutation arguments]]
TODO: summarize [[https://triton-vm.org/spec/copy-constraints.html][Copy Constraints - Triton VM]]
* The key of permutation arguments. [[permutation arguments]]
Let \( \{ s_i \} \), \( \{ t_i \} \) be two subsets of \( \mathbb{F} \) with equal non-zero length. Then \( \prod_i (s_i - \beta) = \prod_i (t_i - \beta) \) over a uniformly random \( \beta \in \mathbb{F} \) has negligible  probability if \( \{ s_i \} \) is not a permutation of \( \{ t_i \} \). This is an application of [[https://en.wikipedia.org/wiki/Schwartz%E2%80%93Zippel_lemma][Schwartz–Zippel lemma - Wikipedia]].