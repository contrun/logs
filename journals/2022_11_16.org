* What is the zerofier of transition constraint? Justify the code below from triton-vm. [[triton-vm]]
:PROPERTIES:
:id: 637433de-7668-439e-a805-992dbebf10c4
:END:
https://github.com/TritonVM/triton-vm/blob/bd2cf06016fbd591c7d2ee2e1b9dc348380a09b3/triton-vm/src/table/extension_table.rs#L273-L282
#+BEGIN_SRC rust
        let subgroup_zerofier: Vec<_> = fri_domain_values
            .par_iter()
            .map(|fri_dom_v| fri_dom_v.mod_pow_u32(padded_height as u32) - one)
            .collect();
        let subgroup_zerofier_inverse = XFieldElement::batch_inversion(subgroup_zerofier);
        let zerofier_inverse: Vec<_> = fri_domain_values
            .into_par_iter()
            .zip_eq(subgroup_zerofier_inverse.into_par_iter())
            .map(|(fri_dom_v, sub_z_inv)| (fri_dom_v - omicron_inverse) * sub_z_inv)
            .collect();
#+END_SRC
+ It seems that ~fri_dom_v.mod_pow_u32(padded_height as u32)~ may equal ~one~. It will not equal ~one~ if the FRI domain has an offset.
+ Why is the zerofier multiplied with ~fri_dom_v - omicron_inverse~?
*