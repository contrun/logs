* What is the zerofier of transition constraint? Justify the code below from triton-vm. [[triton-vm]]
:PROPERTIES:
:id: 637433de-7668-439e-a805-992dbebf10c4
:END:
https://github.com/TritonVM/triton-vm/blob/bd2cf06016fbd591c7d2ee2e1b9dc348380a09b3/triton-vm/src/table/extension_table.rs#L273-L282
#+BEGIN_SRC rust
        let subgroup_zerofier: Vec<_> = fri_domain_values
            .par_iter()
            .map(|fri_dom_v| fri_dom_v.mod_pow_u32(padded_height as u32) - one)
            .collect();
        let subgroup_zerofier_inverse = XFieldElement::batch_inversion(subgroup_zerofier);
        let zerofier_inverse: Vec<_> = fri_domain_values
            .into_par_iter()
            .zip_eq(subgroup_zerofier_inverse.into_par_iter())
            .map(|(fri_dom_v, sub_z_inv)| (fri_dom_v - omicron_inverse) * sub_z_inv)
            .collect();
#+END_SRC
+ It seems that ~fri_dom_v.mod_pow_u32(padded_height as u32)~ may equal ~one~. It will not equal ~one~ if the FRI domain has an offset.
+ Why is the zerofier multiplied with ~fri_dom_v - omicron_inverse~?
* Can we combine polynomials with different degree bounds in FRI to batch prove the low-degreeness of polynomials?
[[https://github.com/aszepieniec/stark-anatomy/blob/185b6be55309f6b2e1ab2378a214ae48d149484b/code/stark.py#L119-L143][stark anatomy]]
#+BEGIN_SRC python
* # get weights for nonlinear combination
        #  - 1 randomizer
        #  - 2 for every transition quotient
        #  - 2 for every boundary quotient
        weights = self.sample_weights(1 + 2*len(transition_quotients) + 2*len(boundary_quotients), proof_stream.prover_fiat_shamir())
* assert([tq.degree() for tq in transition_quotients] == self.transition_quotient_degree_bounds(transition_constraints)), "transition quotient degrees do not match with expectation"
# compute terms of nonlinear combination polynomial
        x = Polynomial([self.field.zero(), self.field.one()])
        max_degree = self.max_degree(transition_constraints)
        terms = []
        terms += [randomizer_polynomial]
        for i in range(len(transition_quotients)):
            terms += [transition_quotients[i]]
            shift = max_degree - self.transition_quotient_degree_bounds(transition_constraints)[i]
            terms += [(x^shift) * transition_quotients[i]]
        for i in range(self.num_registers):
            terms += [boundary_quotients[i]]
            shift = max_degree - self.boundary_quotient_degree_bounds(len(trace), boundary)[i]
            terms += [(x^shift) * boundary_quotients[i]]
# take weighted sum
        # combination = sum(weights[i] * terms[i] for all i)
        combination = reduce(lambda a, b : a+b, [Polynomial([weights[i]]) * terms[i] for i in range(len(terms))], Polynomial([]))
*