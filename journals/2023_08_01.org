* Webauthn workflow [[WebAuthn]]
[[https://webauthn.me/debugger][See your WebAuthn config in action]]
** Registration
#+BEGIN_SRC text
rawId: ccf4058f6f2ed9ae9637c0495c224b83315728a8e48499aa3e551abaad32a006
id: zPQFj28u2a6WN8BJXCJLgzFXKKjkhJmqPlUauq0yoAY
type: public-key

response: {
clientDataJSON: {
  "type": "webauthn.create",
  "challenge": "N0Ck-UB9VAY4jBsdbeMAnkd7F_Dn8hsdEEZKvCL79wc",
  "origin": "https://webauthn.me",
  "crossOrigin": false
}
authenticatorAttachment: cross-platform,
transports: [
  "usb"
],
attestationObject: {
  "fmt": "none",
  "attStmt": {},
  "authData": {
    "rpIdHash": "f95bc73828ee210f9fd3bbe72d97908013b0a3759e9aea3d0ae318766cd2e1ad",
    "flags": {
      "userPresent": true,
      "reserved1": false,
      "userVerified": false,
      "backupEligibility": false,
      "backupState": false,
      "reserved2": false,
      "attestedCredentialData": true,
      "extensionDataIncluded": false
    },
    "signCount": 1,
    "attestedCredentialData": {
      "aaguid": "00000000-0000-0000-0000-000000000000",
      "credentialId": "ccf4058f6f2ed9ae9637c0495c224b83315728a8e48499aa3e551abaad32a006",
      "credentialPublicKey": {
        "kty": "EC",
        "alg": "ECDSA_w_SHA256",
        "crv": "P-256",
        "x": "wDOEcnm9YLjV1hPScEafkDA0ShlQ8g7NuPHvla3sluU=",
        "y": "1lxwsvqnlHvfavVT5HJH4GYJMm0gMdjLvICYm54faKc="
      }
    }
  }
},
extensions: {}
}
#+END_SRC
** Assertion
#+BEGIN_SRC text
rawId: ccf4058f6f2ed9ae9637c0495c224b83315728a8e48499aa3e551abaad32a006
id: zPQFj28u2a6WN8BJXCJLgzFXKKjkhJmqPlUauq0yoAY
type: public-key

response: {
signature: 3045022062b3536b8bacf5d2d63208ce06830e8782cb86608624b5457b4d54a0f2d6f0460221008de8f7a7ff329c4393d2bad143c195d39027fba8fb00af070ec1d87f2c4eb04d
userHandle: undefined
clientDataJSON: {
  "type": "webauthn.get",
  "challenge": "N0Ck-UB9VAY4jBsdbeMAnkd7F_Dn8hsdEEZKvCL79wc",
  "origin": "https://webauthn.me",
  "crossOrigin": false
}
authenticatorAttachment: cross-platform,
authenticatorData: {
  "rpIdHash": "f95bc73828ee210f9fd3bbe72d97908013b0a3759e9aea3d0ae318766cd2e1ad",
  "flags": {
    "userPresent": true,
    "reserved1": false,
    "userVerified": false,
    "backupEligibility": false,
    "backupState": false,
    "reserved2": false,
    "attestedCredentialData": false,
    "extensionDataIncluded": false
  },
  "signCount": 3
},
extensions: {}
}
#+END_SRC
The signature here is DER formatted binary string.
#+BEGIN_SRC bash
printf "$(printf 3045022062b3536b8bacf5d2d63208ce06830e8782cb86608624b5457b4d54a0f2d6f0460221008de8f7a7ff329c4393d2bad143c195d39027fba8fb00af070ec1d87f2c4eb04d | fold -w 2 | xargs -n 1 printf '\\x%s')" | openssl asn1parse -inform DER
#+END_SRC
whose output is the bigints r and s in [[Elliptic Curve Digital Signature Algorithm]] 
#+BEGIN_SRC text
    0:d=0  hl=2 l=  69 cons: SEQUENCE
    2:d=1  hl=2 l=  32 prim: INTEGER           :62B3536B8BACF5D2D63208CE06830E8782CB86608624B5457B4D54A0F2D6F046
   36:d=1  hl=2 l=  33 prim: INTEGER           :8DE8F7A7FF329C4393D2BAD143C195D39027FBA8FB00AF070EC1D87F2C4EB04D
#+END_SRC
This response is verified by the relying party as in the standard [[https://www.w3.org/TR/webauthn/#sctn-verifying-assertion][WebAuthn Relying Party Operations > Verifying an Authentication Assertion]] (sample code [[https://github.com/go-webauthn/webauthn/blob/9cb3504fb344bae988f6c073b054ed3b2b6d99f9/protocol/assertion.go#L120-L183][webauthn/protocol/assertion.go at 9cb3504fb344bae988f6c073b054ed3b2b6d99f9 Â· go-webauthn/webauthn]]). In particular, Using credentialPublicKey, verify that sig is a valid signature over the binary concatenation of authData and hash (Let hash be the result of computing a hash over the cData using SHA-256).
** What is the use of challenge in WebAuthn? Is it used prevent replay attacks? If so, how? [[WebAuthn]]
Seems to be only a nonce. [[https://www.w3.org/TR/webauthn-2/#sctn-cryptographic-challenges][Cryptographic Challenges]]. Not used in signature.
* What is the concrete speedup number of using precomputed tables in secp256k1? [[performance and optimization]] [[elliptic curves]]
#+BEGIN_QUOTE
Use a precomputed table of multiples of powers of 16 multiplied with the generator, so general multiplication becomes a series of additions.