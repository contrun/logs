* Give a concrete example of “real pairing check” in the plonk paper (p9). [[plonk]] 
By a “real pairing check” we mean a check of the form \( (a \times T_1) \times (T_2 \times b) = 0 \)
for some matrices \( T_1 \), \( T_2 \) over \( \mathbb{F} \). What are \( T_1 \), \( T_2 \) concretely?
In the polynomial commitment scheme given in plonk paper p11, \( T_1, T_2 \) represent the coefficients of the polynomials we want to commit.
* What assumption does the security of elliptic curve pairing algorithms depend on? Let \( e: G_1 \times G_2 \to G_t \) be a pairing,  is it it is hard to find non-trivial solutions to \( e(g_1, g_2) * e(h_1, h_2) = 1 \)? [[pairing-based cryptography]] [[further investigation needed]]
* What did the efficient E do in Knowlege soundness in the Algebraic Group Model (plonk paper p10)? E was only given access to the coefficients of witness \( \omega \). Is it only intended to prove the adversary did adhere to the rules of Algebraic Group Model? What is E's relationship to the extractors in SNARKs? [[plonk]] [[further investigation needed]]
* How are \( z_1, \dots, z_n\) chosen in the polynomial commitment scheme given in the plonk paper p11. Are they fixed constants or given by a random oracle?
They are constants \( \omega^1, \omega^2, \cdots, \)
* Why is TCP hole-punching significantly harder than UDP hole-punching? Is it because middleboxes use connection tracking facilities to block uninitiated TCP connections, e.g. the home router would ignore a SYN packet from the another side, if both peers are behind NAT, then both sides will have no chance to establish a new connection.
* [[https://research.protocol.ai/publications/on-the-impossibility-of-algebraic-vector-commitments-in-pairing-free-groups/][On the Impossibility of Algebraic Vector Commitments in Pairing-Free Groups | Protocol Labs Research]]