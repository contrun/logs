* How do we ensure pop the correct result from OpStack registers in triton-vm? [[triton-vm]]
[[https://triton-vm.org/spec/operational-stack-table.html][Operational Stack Table - Triton VM]] seems to be not enforcing push/pop rules for stack registers. For example, my whole program consists of two instructions, a push 42 followed by a pop. It seems that there is no rule to enforce the pop result is 42. Changing the initial value of ~osp~ to be 0 seems to solve this problem. Why would we choose ~osp~ to be the number of stack registers? This choice would make the transition rules not cover stack registers.
* Why did the OpStack underflow memory change when we run a ~nop~ instruction.
[[https://triton-vm.org/spec/operational-stack-table.html][Operational Stack Table - Triton VM]]
#+BEGIN_QUOTE
|  ~nop~  |  ~pop~  | 48 | 47 | 46 | 45 | [44,43,42,0,0,0,0] | 11 | 44 |
|  ~pop~  |  ~pop~  | 48 | 47 | 46 | 45 | [44,43,99,0,0,0,0] | 11 | 44 |
#+END_QUOTE
Here third element changed from 42 to 99. Is it a typo?
* Does triton-vm's random access memory table does not