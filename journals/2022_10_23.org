* How can we dynamcly unroll the loop, i.e. if the loop variable is not a fixed constant? [[circ]]
* Can we turn circ into a symbolic execution engine? [[circ]]
* Hacks used in parsing. [[compiling techniques]] [[6.035]] 
+ To enforce precedence in operators
2+2*2, Convert from (Expr -> Int, Expr -> Expr + Int, Expr -> Expr * Int, Expr -> Int + Expr, Expr -> Int * Expr) to (Expr -> Int, Expr -> IntermediateExpr, Expr -> Int * IntermediateExpr, Expr -> IntermediateExpr * Int, IntermediateExpr -> IntermediateExpr + Int, IntermediateExpr -> Int + IntermediateExpr)
+ To avoid infinite loop in left recursion
Convert from (Term -> Term AnotherTerm, Term -> TerminalTerm) to (Term -> TerminalTerm R, R -> AnotherTerm R, R -> \(\epsilon\))
* How to minimize gramma? How to prove two grammars are equivalent? [[compiling techniques]]
* What to do when multiple productions with same prefix in RHS? [[compiling techniques]] [[6.035]] 
We can convert (NT → if then, NT → if then else) to (NT → if then NT’, NT’ → else, NT’ → \(\epsilon\)). Are there grammars that are not so easy to convert? What to do then?
* What to do when there are multiple choices in the pushdown automaton? [[compiling techniques]] [[6.035]]
Must we hack the grammar to avoid ambiguity first? Can we do such thing? Can we do such thing automatically? The parser generators need to do such thing.
This is called reduce/reduce conflict and shift/reduce conflict in the [[https://raw.githubusercontent.com/6035/sp22/main/materials/lecture/lec04-f19-shift-reduce-parsing.pdf][Introduction to Shift-Reduce Parsing]]. The key point is twhether to choose reduce or shift and using which production rule to reduce.
* Do there exist intrinsic ambiguity in some grammars, i.e. the ambiguity can not be eliminated? What kind of languages have intrinsic ambiguity? [[theoretical computer science]]
Are there any connection between non-determinism of finite state automaton and ambivalent context free grammar?
* Give a example program that is expressible with Turing machine but not with pushdown automaton. [[theoretical computer science]] 
The Turing machines have two-way tapes, while pushdown automata only have access to the top of a stack.
* How to construct a parse table from a grammar? [[compiling techniques]] [[6.035]] 
NFA <-> context free grammar
* How to construct a parse table which solves the problem of reduce/reduce conflict and reduce/shift conflict? [[compiling techniques]] [[6.035]] 
Parse table itself is not enough. We need look-ahead to solve reduce/reduce conflict. What about shift/reduce conflict?
* What is the parse table like when there are conflicts? Do we have multiple choices, and we need to remember the path token? [[compiling techniques]] [[6.035]]